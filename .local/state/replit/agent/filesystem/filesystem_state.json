{"file_contents":{"README.md":{"content":"# Read Earn Naira 📚💰\n\nA modern news reading platform where users earn Naira tokens for reading quality articles. Stay informed while getting rewarded for your engagement with news content.\n\n![Read Earn Naira](https://img.shields.io/badge/Status-Live-green) ![React](https://img.shields.io/badge/React-18.3.1-blue) ![TypeScript](https://img.shields.io/badge/TypeScript-5.5.3-blue)\n\n## 🌟 Features\n\n### Core Functionality\n- **📖 Article Reading**: Access quality news articles across multiple categories\n- **💰 Token Rewards**: Earn ₦50 Naira tokens for each completed article\n- **🔐 User Authentication**: Secure login system to track progress\n- **🔍 Search & Filter**: Find articles by keywords and filter by categories\n- **📱 Responsive Design**: Optimized for desktop and mobile devices\n\n### Categories\n- Politics\n- Technology\n- Sports\n- Business\n- Entertainment\n\n### User Experience\n- **Hero Section**: Engaging landing area with call-to-action\n- **Category Filters**: Easy navigation between different content types\n- **Article Cards**: Beautiful preview cards with images and metadata\n- **Reading Modal**: Focused reading experience with completion tracking\n- **Statistics Section**: Display user engagement metrics\n- **Dark/Light Theme**: Toggle between themes (configured)\n\n## 🛠️ Technology Stack\n\n### Frontend Framework\n- **React 18.3.1** - Modern React with hooks and context\n- **TypeScript** - Type-safe development\n- **Vite** - Fast build tool and development server\n\n### UI & Styling\n- **Tailwind CSS** - Utility-first CSS framework\n- **shadcn/ui** - High-quality accessible components\n- **Radix UI** - Primitive components for accessibility\n\n### State Management & Data\n- **React Context** - Application state management\n- **React Query** - Data fetching and caching\n- **React Router Dom** - Client-side routing\n\n### Development Tools\n- **ESLint** - Code linting and formatting\n- **PostCSS** - CSS processing\n- **Autoprefixer** - CSS vendor prefixing\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn package manager\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd read-earn-naira\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Start development server**\n   ```bash\n   npm run dev\n   ```\n\n4. **Open your browser**\n   ```\n   http://localhost:5000\n   ```\n\n### Available Scripts\n\n```bash\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run build:dev    # Build in development mode\nnpm run preview      # Preview production build\nnpm run lint         # Run ESLint\n```\n\n## 📁 Project Structure\n\n```\nsrc/\n├── components/           # Reusable UI components\n│   ├── ui/              # shadcn/ui components\n│   │   ├── button.tsx\n│   │   ├── card.tsx\n│   │   ├── dialog.tsx\n│   │   └── ...          # Other UI primitives\n│   ├── AppLayout.tsx    # Main application layout\n│   ├── ArticleModal.tsx # Article reading interface\n│   ├── Header.tsx       # Navigation header\n│   ├── NewsCard.tsx     # Article preview cards\n│   ├── LoginModal.tsx   # User authentication\n│   ├── Footer.tsx       # Site footer\n│   └── StatsSection.tsx # User statistics display\n├── contexts/            # React Context providers\n│   └── AppContext.tsx   # Global application state\n├── data/               # Static data and types\n│   ├── articles.ts     # Article data and interfaces\n│   └── moreArticles.ts # Additional article content\n├── hooks/              # Custom React hooks\n│   ├── use-mobile.tsx  # Mobile device detection\n│   └── use-toast.ts    # Toast notification hook\n├── lib/                # Utility functions\n│   └── utils.ts        # Helper functions and utilities\n├── pages/              # Route components\n│   ├── Index.tsx       # Home page\n│   └── NotFound.tsx    # 404 error page\n├── App.tsx             # Root application component\n├── main.tsx           # Application entry point\n└── index.css          # Global styles and Tailwind imports\n```\n\n## 🎯 How It Works\n\n### User Journey\n1. **Landing**: Users arrive at the hero section explaining the concept\n2. **Browse**: Users can view articles by category or search for specific topics\n3. **Login**: Users authenticate to start earning tokens\n4. **Read**: Users click articles to open the reading modal\n5. **Earn**: Upon completing an article, users earn ₦50 Naira tokens\n6. **Track**: Progress and earnings are tracked in the user's account\n\n### Token System\n- **Starting Bonus**: ₦100 tokens upon first login\n- **Reading Reward**: ₦50 tokens per completed article\n- **No Duplicates**: Users can only earn tokens once per article\n\n### Article Management\n- Articles are stored in TypeScript files with full type safety\n- Each article includes: title, excerpt, content, image, category, author, and metadata\n- Articles are filterable and searchable in real-time\n\n## 🔧 Configuration\n\n### Environment Setup\nThe application is configured for:\n- **Development**: Hot reload with Vite dev server\n- **Production**: Optimized builds with code splitting\n- **Replit**: Ready for deployment on Replit platform\n\n### Customization\n- **Colors**: Modify `tailwind.config.ts` for brand colors\n- **Components**: Extend `components/ui/` for new components\n- **Articles**: Add content to `src/data/articles.ts`\n\n## 🚀 Deployment\n\n### Replit Deployment\nThis project is configured for Replit deployment:\n- Uses port 5000 for frontend\n- Host configured as 0.0.0.0 for proxy compatibility\n- All hosts allowed for iframe viewing\n\n### Build Process\n```bash\nnpm run build     # Creates optimized production build\nnpm run preview   # Test production build locally\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🙏 Acknowledgments\n\n- **shadcn/ui** for the beautiful component library\n- **Radix UI** for accessible primitives\n- **Tailwind CSS** for utility-first styling\n- **Vite** for the excellent development experience\n\n---\n\n**Start reading, start earning! 🎉**\n\nFor questions or support, please open an issue in the repository.\n","size_bytes":6592},"eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n","size_bytes":789},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\nimport animate from \"tailwindcss-animate\";\nimport typography from \"@tailwindcss/typography\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px'\n      }\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))'\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))'\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))'\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))'\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))'\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))'\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))'\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))'\n        }\n      },\n      fontFamily: {\n        mono: ['JetBrains Mono', 'monospace'],\n        sans: ['Inter', 'sans-serif'],\n      },\n      borderRadius: {\n        lg: 'calc(var(--radius) + 2px)',\n        md: 'var(--radius)',\n        sm: 'calc(var(--radius) - 2px)'\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n        'fade-in': {\n          from: { opacity: '0' },\n          to: { opacity: '1' },\n        },\n        'slide-in': {\n          from: { transform: 'translateY(10px)', opacity: '0' },\n          to: { transform: 'translateY(0)', opacity: '1' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'fade-in': 'fade-in 0.3s ease-out',\n        'slide-in': 'slide-in 0.3s ease-out',\n      },\n      typography: {\n        DEFAULT: {\n          css: {\n            maxWidth: 'none',\n          },\n        },\n      },\n    }\n  },\n  plugins: [\n    animate,\n    typography,\n  ],\n} satisfies Config;\n","size_bytes":3297},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n  },\n  plugins: [\n    react()\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n}));\n","size_bytes":396},"src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n\n.logo:hover {\n  filter: drop-shadow(0 0 2em rgba(20, 184, 166, 0.6));\n}\n\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em rgba(20, 184, 166, 0.6));\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n  border-radius: 0.5rem;\n  border: 1px solid rgba(20, 184, 166, 0.1);\n  background-color: rgba(20, 184, 166, 0.02);\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  border-color: rgba(20, 184, 166, 0.3);\n  box-shadow: 0 4px 12px rgba(20, 184, 166, 0.1);\n}\n\n.read-the-docs {\n  color: #5f7676;\n}\n","size_bytes":892},"src/App.tsx":{"content":"\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\nimport Login from \"./pages/auth/Login\";\nimport UserDashboard from \"./pages/user/UserDashboard\";\nimport AdminDashboard from \"./pages/admin/AdminDashboard\";\nimport ArticleEditor from \"./components/cms/ArticleEditor\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <ThemeProvider defaultTheme=\"light\">\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Sonner />\n        <AuthProvider>\n          <BrowserRouter>\n            <Routes>\n              <Route path=\"/\" element={<Index />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route \n                path=\"/dashboard\" \n                element={\n                  <ProtectedRoute>\n                    <UserDashboard />\n                  </ProtectedRoute>\n                } \n              />\n              <Route \n                path=\"/admin/*\" \n                element={\n                  <ProtectedRoute requiredRole={['admin', 'editor']}>\n                    <AdminDashboard />\n                  </ProtectedRoute>\n                } \n              />\n              <Route \n                path=\"/editor/new\" \n                element={\n                  <ProtectedRoute requiredRole={['admin', 'editor']}>\n                    <ArticleEditor />\n                  </ProtectedRoute>\n                } \n              />\n              <Route \n                path=\"/editor/:id\" \n                element={\n                  <ProtectedRoute requiredRole={['admin', 'editor']}>\n                    <ArticleEditor />\n                  </ProtectedRoute>\n                } \n              />\n              <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n          </BrowserRouter>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  </ThemeProvider>\n);\n\nexport default App;\n","size_bytes":2408},"src/components/AppLayout.tsx":{"content":"import React, { useState } from 'react';\nimport { useAppContext } from '@/contexts/AppContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport Header from './Header';\nimport NewsCard from './NewsCard';\nimport { allArticles as articles, Article } from '@/data/articles';\nimport ArticleModal from './ArticleModal';\nimport Footer from './Footer';\nimport StatsSection from './StatsSection';\nimport { toast } from '@/components/ui/use-toast';\n\nconst AppLayout: React.FC = () => {\n  const { sidebarOpen, toggleSidebar } = useAppContext();\n  const { user, profile, updateProfile } = useAuth();\n  const isMobile = useIsMobile();\n  \n  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);\n  const [readArticles, setReadArticles] = useState<Set<string>>(new Set());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n\n  const handleReadArticle = (articleId: string) => {\n    const article = articles.find(a => a.id === articleId);\n    if (article) {\n      setSelectedArticle(article);\n    }\n  };\n\n  const handleCompleteReading = async (articleId: string) => {\n    if (!user || !profile) {\n      toast({\n        title: \"Please login\",\n        description: \"You need to be logged in to earn tokens\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!readArticles.has(articleId)) {\n      setReadArticles(new Set([...readArticles, articleId]));\n      \n      // Update user tokens\n      const newTokens = (profile.tokens || 0) + 50;\n      await updateProfile({ tokens: newTokens });\n      \n      toast({\n        title: \"Congratulations! 🎉\",\n        description: \"You earned ₦50 for reading this article!\",\n      });\n    }\n  };\n\n  const filteredArticles = articles.filter(article => {\n    const matchesSearch = article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         article.excerpt.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'All' || article.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = ['All', 'Politics', 'Technology', 'Sports', 'Business', 'Entertainment'];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header onSearch={setSearchQuery} />\n\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-r from-red-600 to-red-800 text-white\">\n        <div className=\"absolute inset-0 bg-black opacity-50\"></div>\n        <div className=\"relative container mx-auto px-4 py-16\">\n          <div className=\"max-w-4xl\">\n            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-4\">\n              Stay Informed, Get Rewarded\n            </h1>\n            <p className=\"text-lg sm:text-xl mb-8\">\n              Read quality news and earn tokens for every article you complete. \n              Join thousands of readers earning while staying informed.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              {user ? (\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4\">\n                  <span className=\"text-white text-base sm:text-lg\">Welcome back, {profile?.username}!</span>\n                  <div className=\"bg-white text-red-600 px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-semibold text-sm sm:text-base\">\n                    Balance: ₦{profile?.tokens || 0}\n                  </div>\n                </div>\n              ) : (\n                <a \n                  href=\"/login\"\n                  className=\"bg-white text-red-600 px-6 sm:px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-block text-center text-sm sm:text-base\"\n                >\n                  Start Reading & Earning\n                </a>\n              )}\n              <button className=\"border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-red-600 transition-colors\">\n                Learn More\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Category Filter */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex flex-wrap gap-2\">\n          {categories.map(category => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(category)}\n              className={`px-4 py-2 rounded-full font-medium transition-colors ${\n                selectedCategory === category\n                  ? 'bg-red-600 text-white'\n                  : 'bg-white text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              {category}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Articles Grid */}\n      <div className=\"container mx-auto px-4 pb-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredArticles.map(article => (\n            <NewsCard\n              key={article.id}\n              {...article}\n              onRead={handleReadArticle}\n            />\n          ))}\n        </div>\n      </div>\n\n      <StatsSection />\n\n      <ArticleModal\n        article={selectedArticle}\n        isOpen={!!selectedArticle}\n        onClose={() => setSelectedArticle(null)}\n        onComplete={handleCompleteReading}\n        isLoggedIn={!!user}\n      />\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default AppLayout;","size_bytes":5503},"src/components/ArticleModal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X, Clock } from 'lucide-react';\n\ninterface Article {\n  id: string;\n  title: string;\n  content: string;\n  image: string;\n  category: string;\n  author: string;\n  publishedAt: string;\n  readTime: number;\n}\n\ninterface ArticleModalProps {\n  article: Article | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (articleId: string) => void;\n  isLoggedIn: boolean;\n}\n\nconst ArticleModal: React.FC<ArticleModalProps> = ({ \n  article, isOpen, onClose, onComplete, isLoggedIn \n}) => {\n  const [readProgress, setReadProgress] = useState(0);\n  const [startTime, setStartTime] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (isOpen && article) {\n      setStartTime(Date.now());\n      setReadProgress(0);\n    }\n  }, [isOpen, article]);\n\n  useEffect(() => {\n    if (!isOpen || !startTime) return;\n\n    const interval = setInterval(() => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min((elapsed / (article!.readTime * 60 * 1000)) * 100, 100);\n      setReadProgress(progress);\n\n      if (progress >= 100 && isLoggedIn) {\n        onComplete(article!.id);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [startTime, isOpen, article, onComplete, isLoggedIn]);\n\n  if (!isOpen || !article) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"bg-red-600 text-white px-2 py-1 text-xs font-semibold rounded\">\n              {article.category}\n            </span>\n            <div className=\"flex items-center text-sm text-gray-500\">\n              <Clock className=\"w-4 h-4 mr-1\" />\n              {article.readTime} min read\n            </div>\n          </div>\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {isLoggedIn && (\n          <div className=\"bg-gray-100 p-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Reading Progress</span>\n              <span>{Math.round(readProgress)}%</span>\n            </div>\n            <div className=\"w-full bg-gray-300 rounded-full h-2 mt-1\">\n              <div \n                className=\"bg-green-600 h-2 rounded-full transition-all duration-1000\"\n                style={{ width: `${readProgress}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n        <div className=\"overflow-y-auto max-h-[calc(90vh-120px)]\">\n          <img \n            src={article.image} \n            alt={article.title}\n            className=\"w-full h-64 object-cover\"\n          />\n          \n          <div className=\"p-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              {article.title}\n            </h1>\n            \n            <div className=\"flex items-center text-sm text-gray-500 mb-6\">\n              <span>By {article.author}</span>\n              <span className=\"mx-2\">•</span>\n              <span>{article.publishedAt}</span>\n            </div>\n\n            <div className=\"prose max-w-none text-gray-700 leading-relaxed\">\n              {article.content.split('\\n').map((paragraph, index) => (\n                <p key={index} className=\"mb-4\">\n                  {paragraph}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ArticleModal;","size_bytes":3707},"src/components/Footer.tsx":{"content":"import React from 'react';\nimport { Facebook, Twitter, Instagram, Mail, Phone, MapPin } from 'lucide-react';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div>\n            <h3 className=\"text-2xl font-bold text-red-500 mb-4\">dadapay</h3>\n            <p className=\"text-gray-400 mb-4\">\n              Your trusted source for breaking news and quality journalism. \n              Read, learn, and earn rewards while staying informed.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Facebook className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer\" />\n              <Twitter className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer\" />\n              <Instagram className=\"w-5 h-5 text-gray-400 hover:text-white cursor-pointer\" />\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Categories</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Politics</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Technology</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Sports</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Business</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Entertainment</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">About Us</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Contact</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Terms of Service</a></li>\n              <li><a href=\"#\" className=\"text-gray-400 hover:text-white\">Careers</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Contact Info</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                <span className=\"text-gray-400\">contact@dadapay.com</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                <span className=\"text-gray-400\">+234 123 456 7890</span>\n              </div>\n              <div className=\"flex items-center\">\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                <span className=\"text-gray-400\">Lagos, Nigeria</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            © 2024 dadapay. All rights reserved. Built with ❤️ in Nigeria.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":3277},"src/components/Header.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Search, Menu, X, User, Bell, LogIn, LogOut, Settings, BarChart, PlusCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\n\ninterface HeaderProps {\n  onSearch?: (query: string) => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ onSearch }) => {\n  const { user, profile, signOut, isAdmin, isEditor } = useAuth();\n  const navigate = useNavigate();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (onSearch) {\n      onSearch(searchQuery);\n    }\n  };\n\n  const handleSignOut = async () => {\n    await signOut();\n    navigate('/');\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link to=\"/\" className=\"text-2xl font-bold text-red-600 hover:text-red-700 transition-colors\">\n              dadapay\n            </Link>\n          </div>\n\n          {/* Search Bar - Desktop */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <form onSubmit={handleSearch} className=\"w-full\">\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search articles...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full px-4 py-2 pl-10 pr-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              </div>\n            </form>\n          </div>\n\n          {/* User Section */}\n          <div className=\"flex items-center gap-4\">\n            {user && profile ? (\n              <>\n                {/* Token Balance */}\n                <div className=\"hidden md:flex items-center gap-2\">\n                  <span className=\"text-sm text-gray-600\">Balance:</span>\n                  <Badge variant=\"secondary\" className=\"font-semibold text-green-600\">\n                    ₦{profile.tokens || 0}\n                  </Badge>\n                </div>\n\n                {/* Admin/Editor Actions */}\n                {(isAdmin || isEditor) && (\n                  <div className=\"hidden md:flex items-center gap-2\">\n                    <Link to=\"/editor/new\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <PlusCircle className=\"h-4 w-4 mr-2\" />\n                        New Article\n                      </Button>\n                    </Link>\n                    {isAdmin && (\n                      <Link to=\"/admin\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <BarChart className=\"h-4 w-4 mr-2\" />\n                          Admin\n                        </Button>\n                      </Link>\n                    )}\n                  </div>\n                )}\n\n                {/* Notifications */}\n                <div className=\"relative\">\n                  <Bell className=\"h-5 w-5 text-gray-600 cursor-pointer hover:text-gray-800\" />\n                  <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full\"></div>\n                </div>\n\n                {/* User Dropdown */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={profile.avatar_url || undefined} />\n                        <AvatarFallback>\n                          {profile.username?.charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <div className=\"flex items-center justify-start gap-2 p-2\">\n                      <div className=\"flex flex-col space-y-1 leading-none\">\n                        <p className=\"font-medium\">{profile.username}</p>\n                        <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                          {user.email}\n                        </p>\n                        <Badge variant=\"outline\" className=\"w-fit\">\n                          {profile.role}\n                        </Badge>\n                      </div>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link to=\"/dashboard\" className=\"cursor-pointer\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Dashboard\n                      </Link>\n                    </DropdownMenuItem>\n                    {(isAdmin || isEditor) && (\n                      <>\n                        <DropdownMenuItem asChild>\n                          <Link to=\"/editor/new\" className=\"cursor-pointer\">\n                            <PlusCircle className=\"mr-2 h-4 w-4\" />\n                            Create Article\n                          </Link>\n                        </DropdownMenuItem>\n                        {isAdmin && (\n                          <DropdownMenuItem asChild>\n                            <Link to=\"/admin\" className=\"cursor-pointer\">\n                              <BarChart className=\"mr-2 h-4 w-4\" />\n                              Admin Panel\n                            </Link>\n                          </DropdownMenuItem>\n                        )}\n                      </>\n                    )}\n                    <DropdownMenuItem>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Settings\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleSignOut}>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Link to=\"/login\">\n                <Button className=\"bg-red-600 hover:bg-red-700\">\n                  <LogIn className=\"h-4 w-4 mr-2\" />\n                  Login\n                </Button>\n              </Link>\n            )}\n\n            {/* Mobile Menu Button */}\n            <button\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"md:hidden p-2\"\n            >\n              {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden border-t py-4 space-y-4\">\n            <form onSubmit={handleSearch}>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search articles...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full px-4 py-2 pl-10 pr-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              </div>\n            </form>\n            \n            {user && profile && (\n              <>\n                <div className=\"flex items-center gap-2 py-2\">\n                  <span className=\"text-sm text-gray-600\">Balance:</span>\n                  <Badge variant=\"secondary\" className=\"font-semibold text-green-600\">\n                    ₦{profile.tokens || 0}\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Link to=\"/dashboard\" className=\"block\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Dashboard\n                    </Button>\n                  </Link>\n                  \n                  {(isAdmin || isEditor) && (\n                    <>\n                      <Link to=\"/editor/new\" className=\"block\">\n                        <Button variant=\"outline\" className=\"w-full justify-start\">\n                          <PlusCircle className=\"mr-2 h-4 w-4\" />\n                          Create Article\n                        </Button>\n                      </Link>\n                      {isAdmin && (\n                        <Link to=\"/admin\" className=\"block\">\n                          <Button variant=\"outline\" className=\"w-full justify-start\">\n                            <BarChart className=\"mr-2 h-4 w-4\" />\n                            Admin Panel\n                          </Button>\n                        </Link>\n                      )}\n                    </>\n                  )}\n                  \n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start\"\n                    onClick={handleSignOut}\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Sign Out\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":10109},"src/components/LoginModal.tsx":{"content":"import React, { useState } from 'react';\nimport { X } from 'lucide-react';\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLogin: (email: string, password: string) => void;\n}\n\nconst LoginModal: React.FC<LoginModalProps> = ({ isOpen, onClose, onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isSignup, setIsSignup] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(email, password);\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            {isSignup ? 'Sign Up' : 'Login'}\n          </h2>\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email\n            </label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500\"\n              required\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500\"\n              required\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"w-full bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 transition-colors\"\n          >\n            {isSignup ? 'Sign Up' : 'Login'}\n          </button>\n        </form>\n\n        <div className=\"mt-4 text-center\">\n          <button\n            onClick={() => setIsSignup(!isSignup)}\n            className=\"text-red-600 hover:underline\"\n          >\n            {isSignup ? 'Already have an account? Login' : \"Don't have an account? Sign up\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginModal;","size_bytes":2700},"src/components/NewsCard.tsx":{"content":"import React from 'react';\n\ninterface NewsCardProps {\n  id: string;\n  title: string;\n  excerpt: string;\n  image: string;\n  category: string;\n  readTime: number;\n  author: string;\n  publishedAt: string;\n  onRead: (id: string) => void;\n}\n\nconst NewsCard: React.FC<NewsCardProps> = ({\n  id, title, excerpt, image, category, readTime, author, publishedAt, onRead\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden group cursor-pointer\"\n         onClick={() => onRead(id)}>\n      <div className=\"relative overflow-hidden\">\n        <img \n          src={image} \n          alt={title}\n          className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n        />\n        <div className=\"absolute top-3 left-3\">\n          <span className=\"bg-red-600 text-white px-2 py-1 text-xs font-semibold rounded\">\n            {category}\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"p-4\">\n        <h3 className=\"font-bold text-lg text-gray-900 mb-2 group-hover:text-red-600 transition-colors line-clamp-2\">\n          {title}\n        </h3>\n        <p className=\"text-gray-600 text-sm mb-3 line-clamp-3\">\n          {excerpt}\n        </p>\n        \n        <div className=\"flex justify-between items-center text-xs text-gray-500\">\n          <span>By {author}</span>\n          <div className=\"flex items-center gap-2\">\n            <span>{readTime} min read</span>\n            <span>•</span>\n            <span>{publishedAt}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NewsCard;","size_bytes":1639},"src/components/StatsSection.tsx":{"content":"import React from 'react';\nimport { Users, BookOpen, Award, TrendingUp } from 'lucide-react';\n\nconst StatsSection: React.FC = () => {\n  const stats = [\n    {\n      icon: Users,\n      value: '50K+',\n      label: 'Active Readers',\n      description: 'Join our growing community'\n    },\n    {\n      icon: BookOpen,\n      value: '1M+',\n      label: 'Articles Read',\n      description: 'Quality content consumed'\n    },\n    {\n      icon: Award,\n      value: '₦2.5M',\n      label: 'Tokens Earned',\n      description: 'Rewards distributed to readers'\n    },\n    {\n      icon: TrendingUp,\n      value: '95%',\n      label: 'Satisfaction Rate',\n      description: 'Happy readers and growing'\n    }\n  ];\n\n  return (\n    <section className=\"bg-white py-16\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-4\">\n            dadapay by the Numbers\n          </h2>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Join thousands of readers who are already earning tokens while staying informed \n            with quality journalism and breaking news coverage.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 sm:gap-8\">\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <div key={index} className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4\">\n                  <IconComponent className=\"w-8 h-8 text-red-600\" />\n                </div>\n                <div className=\"text-2xl sm:text-3xl font-bold text-gray-900 mb-2\">\n                  {stat.value}\n                </div>\n                <div className=\"text-base sm:text-lg font-semibold text-gray-800 mb-1\">\n                  {stat.label}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  {stat.description}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default StatsSection;","size_bytes":2179},"src/components/theme-provider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport { ThemeProviderProps } from \"next-themes/dist/types\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeContextType = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | null>(null)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  value: _value,\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      const savedTheme = localStorage.getItem(\"theme\")\n      return (savedTheme && (savedTheme === \"dark\" || savedTheme === \"light\" || savedTheme === \"system\")\n        ? savedTheme\n        : defaultTheme) as Theme\n    }\n    return defaultTheme as Theme\n  })\n\n  useEffect(() => {\n    const root = window.document.documentElement\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value: ThemeContextType = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(\"theme\", theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeContext.Provider value={value} {...props}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n  }\n  return context\n}\n","size_bytes":1692},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border/50\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:text-primary [&[data-state=open]>svg]:rotate-180 [&[data-state=open]]:text-primary\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-300 ease-in-out text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm text-muted-foreground transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2087},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-primary/90\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground mt-2\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4461},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground shadow-sm\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        success:\n          \"border-green-500/50 text-green-600 dark:text-green-400 [&>svg]:text-green-600 dark:[&>svg]:text-green-400 bg-green-50 dark:bg-green-950/20\",\n        warning:\n          \"border-yellow-500/50 text-yellow-600 dark:text-yellow-400 [&>svg]:text-yellow-600 dark:[&>svg]:text-yellow-400 bg-yellow-50 dark:bg-yellow-950/20\",\n        info:\n          \"border-primary/50 text-primary dark:text-primary-foreground [&>svg]:text-primary bg-primary/10 dark:bg-primary/20\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed opacity-90\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":2091},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\n    size?: \"sm\" | \"md\" | \"lg\" | \"xl\"\n  }\n>(({ className, size = \"md\", ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex shrink-0 overflow-hidden rounded-full border border-border/30 ring-offset-background\",\n      size === \"sm\" && \"h-8 w-8\",\n      size === \"md\" && \"h-10 w-10\",\n      size === \"lg\" && \"h-12 w-12\",\n      size === \"xl\" && \"h-16 w-16\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full object-cover\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1677},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-all focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground border-border\",\n        success:\n          \"border-transparent bg-green-500/20 text-green-700 dark:text-green-300 border-green-500/30\",\n        warning:\n          \"border-transparent bg-yellow-500/20 text-yellow-700 dark:text-yellow-300 border-yellow-500/30\",\n        info:\n          \"border-transparent bg-primary/10 text-primary border-primary/30\",\n      },\n      size: {\n        default: \"px-2.5 py-0.5 text-xs\",\n        sm: \"px-2 py-0.5 text-[10px]\",\n        lg: \"px-3 py-0.5 text-sm\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, size, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant, size }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1651},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-primary focus-visible:text-primary\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-medium text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5 text-muted-foreground/50\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight className=\"h-3.5 w-3.5\" />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center text-muted-foreground\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2796},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1835},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium text-foreground\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\", size: \"sm\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-70 hover:opacity-100 transition-opacity\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\", size: \"sm\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:text-accent-foreground\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-md transition-colors\",\n        day_today: \"bg-accent/50 text-accent-foreground rounded-md\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/30 aria-selected:text-muted-foreground aria-selected:opacity-40\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent/60 aria-selected:text-accent-foreground rounded-none\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2767},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border border-border/40 bg-background shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight text-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1895},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full border border-border/40 opacity-80 hover:opacity-100 transition-opacity\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6353},"src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/40 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border/60 [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border/40 [&_.recharts-radial-bar-background-sector]:fill-muted/50 [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted/80 [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border/40 [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background/95 backdrop-blur-sm px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10501},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary/60 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground transition-colors duration-200\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-3.5 w-3.5 transition-transform duration-200\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1131},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b border-border/40 px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground/60 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm text-muted-foreground\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border/60\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent/60 data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 transition-colors\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground/70\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4888},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current text-primary\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-medium text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border/60\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground/70\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7423},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border/40 bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight text-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3889},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border border-border bg-card shadow-lg\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted/50\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight text-primary/90\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground mt-2\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3071},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current text-primary\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-medium text-foreground/80\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border/60\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground/70\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7539},"src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2 mb-4\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", \"text-sm font-medium mb-1\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground/80 mt-1\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive mt-1\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4131},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1234},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input bg-background/50 text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-primary ring-offset-background border-primary/50\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-primary duration-700\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props} className=\"text-muted-foreground\">\n    <Dot className=\"h-4 w-4\" />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2242},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement>\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-border/60 bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":805},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n  {\n    variants: {\n      variant: {\n        default: \"text-foreground\",\n        muted: \"text-muted-foreground\",\n        accent: \"text-primary\",\n      },\n      size: {\n        default: \"text-sm\",\n        xs: \"text-xs\",\n        sm: \"text-sm\",\n        lg: \"text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants({ variant, size }), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":1109},"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border border-border/50 bg-background/50 p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[state=open]:bg-accent/60 data-[state=open]:text-accent-foreground transition-colors\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/60 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current text-primary\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-medium text-foreground/80\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border/60\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground/70\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8307},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background/50 px-4 py-2 text-sm font-medium transition-all hover:bg-accent/50 hover:text-accent-foreground focus:bg-accent/50 focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/60 data-[state=open]:bg-accent/60\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 ease-in-out group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 duration-200 md:absolute md:w-auto\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border border-border/40 bg-popover/95 backdrop-blur-sm text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-primary/20 shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5117},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      isActive && \"border-primary/50 bg-primary/5 text-primary hover:bg-primary/10\",\n      \"transition-colors\",\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5 hover:text-primary\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5 hover:text-primary\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center text-muted-foreground\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2923},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border border-border/40 bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1260},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface ProgressProps extends\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {\n  variant?: \"default\" | \"success\" | \"warning\" | \"error\"\n}\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  ProgressProps\n>(({ className, value, variant = \"default\", ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary/40\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all duration-300 ease-in-out\",\n        variant === \"default\" && \"bg-primary\",\n        variant === \"success\" && \"bg-green-500\",\n        variant === \"warning\" && \"bg-yellow-500\",\n        variant === \"error\" && \"bg-destructive\",\n      )}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":1142},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary/60 text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current animate-in scale-in-0 duration-200\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1536},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border/50 after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border border-border/50 bg-border/30 hover:bg-border/50 transition-colors\">\n        <GripVertical className=\"h-2.5 w-2.5 text-primary/40\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1788},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> & {\n    hideScrollbar?: boolean\n  }\n>(({ className, children, hideScrollbar = false, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    {!hideScrollbar && <ScrollBar />}\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors duration-300\",\n      orientation === \"vertical\" &&\n        \"h-full w-2 border-l border-l-transparent p-[1px] hover:w-2.5\",\n      orientation === \"horizontal\" &&\n        \"h-2 flex-col border-t border-t-transparent p-[1px] hover:h-2.5\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border/50 hover:bg-border/80 transition-colors\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1794},"src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:border-primary/50 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50 transition-transform duration-200 ease-in-out group-data-[state=open]:rotate-180\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border/40 bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 duration-200\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-medium text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent/50 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4 text-primary\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5884},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface SeparatorProps extends\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> {\n  variant?: \"default\" | \"muted\" | \"accent\"\n}\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  SeparatorProps\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, variant = \"default\", ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0\",\n        variant === \"default\" && \"bg-border\",\n        variant === \"muted\" && \"bg-muted\",\n        variant === \"accent\" && \"bg-primary/30\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":1003},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-card border shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b rounded-b-xl data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t rounded-t-xl data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:pointer-events-none\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-primary/90\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground mt-2\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4294},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst sidebarVariants = cva(\n  \"h-full bg-background/80 backdrop-blur-sm border-r border-border/40 shadow-sm\",\n  {\n    variants: {\n      size: {\n        sm: \"w-16\",\n        md: \"w-64\",\n        lg: \"w-80\",\n      },\n      collapsible: {\n        true: \"transition-all duration-300 ease-in-out\",\n      },\n    },\n    defaultVariants: {\n      size: \"md\",\n    },\n  }\n)\n\ninterface SidebarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof sidebarVariants> {\n  collapsed?: boolean\n}\n\nconst Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(\n  (\n    { className, size, collapsible, collapsed = false, children, ...props },\n    ref\n  ) => {\n    const actualSize = collapsed ? \"sm\" : size\n    return (\n      <div\n        ref={ref}\n        className={cn(sidebarVariants({ size: actualSize, collapsible }), className)}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"p-4 border-b border-border/40\", className)}\n    {...props}\n  />\n))\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"p-4 border-t border-border/40 mt-auto\", className)}\n    {...props}\n  />\n))\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col flex-1 p-2\", className)} {...props} />\n))\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarNav = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <nav\n    ref={ref}\n    className={cn(\"flex flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarNav.displayName = \"SidebarNav\"\n\nconst SidebarNavItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { active?: boolean }\n>(({ className, active, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex items-center px-3 py-2 rounded-md text-sm text-foreground/80 hover:text-foreground hover:bg-accent/50 transition-colors cursor-pointer\",\n      active && \"bg-accent/60 text-primary font-medium\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarNavItem.displayName = \"SidebarNavItem\"\n\nconst SidebarSection = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"mb-2\", className)} {...props} />\n))\nSidebarSection.displayName = \"SidebarSection\"\n\nconst SidebarSectionTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-xs uppercase font-medium text-muted-foreground/70 tracking-wider px-3 py-1\", className)}\n    {...props}\n  />\n))\nSidebarSectionTitle.displayName = \"SidebarSectionTitle\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n  SidebarNav,\n  SidebarNavItem,\n  SidebarSection,\n  SidebarSectionTitle\n}\n","size_bytes":22073},"src/components/ui/skeleton.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  animated?: boolean\n}\n\nfunction Skeleton({\n  className,\n  animated = true,\n  ...props\n}: SkeletonProps) {\n  return (\n    <div\n      className={cn(\n        \"rounded-md bg-muted/70\",\n        animated && \"animate-pulse\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":433},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary/50\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow-sm ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:border-primary hover:scale-110\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1130},"src/components/ui/sonner.tsx":{"content":"\nimport React from \"react\"\nimport { Toaster as Sonner, toast } from \"sonner\"\nimport { useTheme } from \"@/components/theme-provider\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":926},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-10 shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-md ring-0 transition-transform duration-200 ease-in-out data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0.5 data-[state=checked]:bg-white\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1194},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted/50 p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-primary data-[state=active]:shadow-sm hover:text-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 animate-in fade-in-0 data-[state=inactive]:animate-out data-[state=inactive]:fade-out-0 duration-200\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":2012},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:border-primary/50 disabled:cursor-not-allowed disabled:opacity-50 transition-colors resize-none\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":733},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants> & {\n      orientation?: \"horizontal\" | \"vertical\"\n    }\n>(({ className, variant, size, orientation = \"horizontal\", children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex items-center gap-1\",\n      orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n      variant === \"outline\" && \"bg-background rounded-md border border-input p-1\",\n      className\n    )}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        context.variant === \"outline\" && \"data-[state=on]:bg-background data-[state=on]:text-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":2075},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent/60 data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent hover:bg-muted/60 hover:text-foreground\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent/20 hover:text-accent-foreground data-[state=on]:border-accent\",\n        soft:\n          \"bg-transparent hover:bg-primary/10 data-[state=on]:bg-primary/20 data-[state=on]:text-primary\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-8 px-2.5 text-xs\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1600},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border border-border/40 bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-lg animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1162},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"src/contexts/AppContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface AppContextType {\n  sidebarOpen: boolean;\n  toggleSidebar: () => void;\n}\n\nconst defaultAppContext: AppContextType = {\n  sidebarOpen: false,\n  toggleSidebar: () => {},\n};\n\nconst AppContext = createContext<AppContextType>(defaultAppContext);\n\nexport const useAppContext = () => useContext(AppContext);\n\nexport const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const toggleSidebar = () => {\n    setSidebarOpen(prev => !prev);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        sidebarOpen,\n        toggleSidebar,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n","size_bytes":859},"src/data/articles.ts":{"content":"import { additionalArticles } from './moreArticles';\n\nexport interface Article {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  image: string;\n  category: string;\n  author: string;\n  publishedAt: string;\n  readTime: number;\n}\n\n\nexport const articles: Article[] = [\n  {\n    id: '1',\n    title: 'Breaking: Major Political Reform Announced',\n    excerpt: 'Government unveils comprehensive reform package addressing key economic challenges.',\n    content: 'In a landmark announcement today, the government has unveiled a comprehensive reform package that promises to address several key economic challenges facing the nation. The reforms include significant changes to fiscal policy, infrastructure investment, and regulatory frameworks.\\n\\nThe package, which has been in development for over six months, represents the most significant policy shift in recent years. Key stakeholders from various sectors have been consulted throughout the process.\\n\\nEconomic experts predict that these reforms could have far-reaching implications for both domestic and international markets. The implementation timeline spans the next 18 months, with initial phases beginning immediately.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390423216_fa38dfc3.webp',\n    category: 'Politics',\n    author: 'Sarah Johnson',\n    publishedAt: '2 hours ago',\n    readTime: 3\n  },\n  {\n    id: '2',\n    title: 'Tech Giants Report Record Quarterly Earnings',\n    excerpt: 'Major technology companies exceed expectations with strong financial performance.',\n    content: 'The technology sector continues to demonstrate remarkable resilience and growth, with several major companies reporting record-breaking quarterly earnings. This performance has exceeded analyst expectations and signals continued strength in the digital economy.\\n\\nKey drivers of this growth include increased cloud computing adoption, artificial intelligence investments, and sustained demand for digital services. Companies have also benefited from operational efficiency improvements and strategic acquisitions.\\n\\nInvestors are closely watching how these companies plan to reinvest their profits, particularly in emerging technologies and global expansion initiatives.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390435140_6ffece0a.webp',\n    category: 'Technology',\n    author: 'Michael Chen',\n    publishedAt: '4 hours ago',\n    readTime: 4\n  },\n  {\n    id: '3',\n    title: 'Championship Finals Set Record Viewership',\n    excerpt: 'Sports fans worldwide tune in for the most-watched championship game in history.',\n    content: 'Last night\\'s championship game has officially become the most-watched sporting event in television history, with viewership numbers exceeding all previous records. The thrilling match kept audiences engaged throughout, with dramatic moments that will be remembered for years to come.\\n\\nThe game featured exceptional performances from both teams, with several players achieving career milestones. The final score reflected the competitive nature of the match, with the outcome decided in the final minutes.\\n\\nBroadcasters report that streaming platforms also saw unprecedented traffic, indicating the growing shift toward digital viewing habits among sports fans.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390445020_b46d61e9.webp',\n    category: 'Sports',\n    author: 'David Rodriguez',\n    publishedAt: '6 hours ago',\n    readTime: 3\n  }\n];\n\n// Combine base articles with additional articles\nexport const allArticles: Article[] = [...articles, ...additionalArticles];","size_bytes":3677},"src/data/moreArticles.ts":{"content":"import { Article } from './articles';\n\nexport const additionalArticles: Article[] = [\n  {\n    id: '4',\n    title: 'Market Analysis: Economic Indicators Show Growth',\n    excerpt: 'Latest financial reports indicate positive trends across multiple sectors.',\n    content: 'Recent economic indicators paint an optimistic picture for the coming quarters, with multiple sectors showing sustained growth patterns. Financial analysts report increased consumer confidence and business investment.\\n\\nKey metrics including employment rates, consumer spending, and manufacturing output have all exceeded forecasts. This positive momentum is attributed to effective policy measures and improved market conditions.\\n\\nExperts recommend cautious optimism while monitoring global economic factors that could influence future performance.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390454191_a269f55c.webp',\n    category: 'Business',\n    author: 'Emma Thompson',\n    publishedAt: '8 hours ago',\n    readTime: 5\n  },\n  {\n    id: '5',\n    title: 'Innovation in Artificial Intelligence Reaches New Milestone',\n    excerpt: 'Breakthrough research demonstrates significant advances in machine learning capabilities.',\n    content: 'Researchers have achieved a significant breakthrough in artificial intelligence, demonstrating capabilities that were previously thought to be years away. The advancement represents a major step forward in machine learning technology.\\n\\nThe research team has successfully developed algorithms that can process complex data patterns with unprecedented accuracy. This development has immediate applications in healthcare, finance, and scientific research.\\n\\nIndustry leaders are already exploring how to integrate these innovations into existing systems, potentially revolutionizing how we approach data analysis and decision-making processes.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390437239_7616f535.webp',\n    category: 'Technology',\n    author: 'Dr. Alex Kim',\n    publishedAt: '12 hours ago',\n    readTime: 4\n  },\n  {\n    id: '6',\n    title: 'International Trade Agreements Boost Economic Cooperation',\n    excerpt: 'New partnerships promise to strengthen global economic relationships.',\n    content: 'Several nations have signed comprehensive trade agreements that are expected to boost economic cooperation and create new opportunities for businesses worldwide. These partnerships represent months of careful negotiation and planning.\\n\\nThe agreements focus on reducing trade barriers, improving supply chain efficiency, and promoting sustainable business practices. Small and medium enterprises are expected to benefit significantly from these new opportunities.\\n\\nEconomic forecasts suggest these partnerships could generate substantial growth in international trade volumes over the next five years.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390426522_fb61d958.webp',\n    category: 'Politics',\n    author: 'Maria Garcia',\n    publishedAt: '1 day ago',\n    readTime: 3\n  },\n  {\n    id: '7',\n    title: 'Entertainment Industry Embraces Digital Transformation',\n    excerpt: 'Streaming platforms and digital content creation reshape entertainment landscape.',\n    content: 'The entertainment industry continues its rapid digital transformation, with streaming platforms and digital content creation fundamentally reshaping how audiences consume media. This shift has accelerated innovation across all entertainment sectors.\\n\\nTraditional media companies are investing heavily in digital platforms and original content creation. The change has created new opportunities for content creators and artists while challenging established distribution models.\\n\\nIndustry analysts predict this transformation will continue to evolve, with emerging technologies like virtual reality and interactive content playing increasingly important roles in entertainment experiences.',\n    image: 'https://d64gsuwffb70l.cloudfront.net/68b063b88a77f2e024002c88_1756390635831_c45a7b14.webp',\n    category: 'Entertainment',\n    author: 'Lisa Park',\n    publishedAt: '2 days ago',\n    readTime: 4\n  }\n];","size_bytes":4220},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    };\n\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}\n","size_bytes":576},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\";\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) =>\n      dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","size_bytes":3952},"src/index.css":{"content":"\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 210 40% 98%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 221 83% 53%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221 83% 53%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 220 23% 95%;\n    --sidebar-foreground: 215 25% 27%;\n    --sidebar-primary: 221 83% 53%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 220 14% 90%;\n    --sidebar-accent-foreground: 215 25% 27%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 221 83% 53%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 224.3 76.3% 48%;\n\n    --sidebar-background: 215 28% 17%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 217.2 91.2% 59.8%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 215 25% 27%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 215 25% 27%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans dark:bg-background dark:text-foreground;\n  }\n\n  pre, code {\n    @apply font-mono;\n  }\n}\n\n.markdown-editor {\n  @apply font-mono text-base leading-relaxed;\n}\n\n.markdown-preview {\n  @apply prose max-w-none prose-blue dark:prose-invert;\n}\n\n.markdown-preview pre {\n  @apply bg-secondary p-4 rounded-md overflow-x-auto;\n}\n\n.markdown-preview code {\n  @apply text-sm font-mono text-primary;\n}\n\n.markdown-preview h1,\n.markdown-preview h2,\n.markdown-preview h3,\n.markdown-preview h4,\n.markdown-preview h5,\n.markdown-preview h6 {\n  @apply font-sans font-semibold text-foreground;\n}\n\n.markdown-preview ul,\n.markdown-preview ol {\n  @apply my-4 ml-6;\n}\n","size_bytes":2985},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/main.tsx":{"content":"\nimport { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\n// Remove dark mode class addition\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":194},"src/pages/Index.tsx":{"content":"\nimport React from 'react';\nimport AppLayout from '@/components/AppLayout';\nimport { AppProvider } from '@/contexts/AppContext';\n\nconst Index: React.FC = () => {\n  return (\n    <AppProvider>\n      <AppLayout />\n    </AppProvider>\n  );\n};\n\nexport default Index;\n","size_bytes":261},"src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center p-8 rounded-lg border border-border bg-card shadow-md animate-slide-in\">\n        <h1 className=\"text-5xl font-bold mb-6 text-primary\">404</h1>\n        <p className=\"text-xl text-card-foreground mb-6\">Page not found</p>\n        <a href=\"/\" className=\"text-primary hover:text-primary/80 underline transition-colors\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":845},"replit.md":{"content":"# Read Earn Naira - News Platform\n\n## Overview\n\nRead Earn Naira is a modern news reading platform built with React that gamifies news consumption by rewarding users with Naira tokens for reading articles. The application features a responsive design with category-based article filtering, user authentication, and a token-based reward system that incentivizes quality journalism engagement.\n\n## Recent Changes\n\n### September 24, 2025 - Initial Replit Setup\n- Imported project from GitHub and configured for Replit environment\n- Fixed TypeScript configuration issues by adding Node.js types to tsconfig.node.json\n- Installed all npm dependencies and resolved module resolution issues\n- Configured Vite development server with proper host settings (0.0.0.0:5000) and allowedHosts: true\n- Set up Frontend Server workflow for automatic server management\n- Configured deployment settings for production (autoscale with npm build and serve)\n- Verified both development and production builds work correctly\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a modern React 18.3.1 architecture with TypeScript for type safety. The component structure follows a modular approach with:\n- **Component Organization**: UI components are organized using the shadcn/ui design system with Radix UI primitives for accessibility\n- **State Management**: React Context API manages global application state, with local component state for UI interactions\n- **Routing**: React Router Dom handles client-side navigation with a simple two-page structure (Index and NotFound)\n- **Build System**: Vite provides fast development server and optimized production builds\n\n### UI/UX Design System\n- **Styling Framework**: Tailwind CSS with utility-first approach for rapid development\n- **Component Library**: shadcn/ui components built on top of Radix UI primitives\n- **Theme System**: Custom CSS variables for consistent color schemes and dark/light mode support\n- **Typography**: Inter font family for body text and JetBrains Mono for code elements\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n\n### Data Architecture\n- **Static Data**: Articles are stored in TypeScript modules with type definitions\n- **Data Fetching**: React Query (TanStack Query) for server state management and caching\n- **Local State**: React hooks manage user authentication status, token balance, and reading progress\n\n### Authentication & User Management\n- **Authentication Flow**: Modal-based login/signup system with email and password\n- **User State**: Context-based user session management\n- **Token System**: Local state tracking of user token balance with rewards for article completion\n\n### Reading Experience & Gamification\n- **Article Modal**: Focused reading experience with progress tracking\n- **Reading Progress**: Time-based completion detection (based on estimated reading time)\n- **Reward System**: 50 Naira tokens awarded per completed article\n- **Categories**: Five main content categories (Politics, Technology, Sports, Business, Entertainment)\n\n### Performance Optimization\n- **Code Splitting**: Vite's automatic code splitting for optimal bundle sizes\n- **Image Optimization**: Placeholder images with lazy loading patterns\n- **Development Tools**: Hot module replacement and TypeScript compilation\n\n## External Dependencies\n\n### Core Framework & Build Tools\n- **React 18.3.1**: Main frontend framework with modern hooks and concurrent features\n- **TypeScript**: Type safety and improved developer experience\n- **Vite**: Fast build tool and development server\n\n### UI Component Libraries\n- **Radix UI**: Accessible primitive components for complex UI elements\n- **shadcn/ui**: Pre-built component library with consistent design patterns\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n### State Management & Data Fetching\n- **React Query (TanStack Query)**: Server state management and caching\n- **React Hook Form**: Form validation and management\n- **React Router Dom**: Client-side routing\n\n### Utility Libraries\n- **class-variance-authority**: Component variant management\n- **clsx**: Conditional className utilities\n- **date-fns**: Date formatting and manipulation\n- **uuid**: Unique identifier generation\n\n### Development & Quality Tools\n- **ESLint**: Code linting with TypeScript and React-specific rules\n- **PostCSS**: CSS processing with Tailwind CSS\n- **Autoprefixer**: CSS vendor prefix automation\n\nNote: The application currently uses static data but is architected to easily integrate with backend services. The presence of Supabase client suggests future database integration plans.","size_bytes":4766},"src/components/ProtectedRoute.tsx":{"content":"import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertTriangle } from 'lucide-react'\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode\n  requiredRole?: string | string[]\n  fallback?: React.ReactNode\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  requiredRole,\n  fallback \n}) => {\n  const { user, profile, isLoading, hasRole } = useAuth()\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-red-600\"></div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return <Navigate to=\"/login\" replace />\n  }\n\n  if (requiredRole && !hasRole(requiredRole)) {\n    if (fallback) {\n      return <>{fallback}</>\n    }\n    \n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Alert className=\"max-w-md\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            You don't have permission to access this page. Required role: {\n              Array.isArray(requiredRole) ? requiredRole.join(' or ') : requiredRole\n            }\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  return <>{children}</>\n}\n\nexport default ProtectedRoute","size_bytes":1429},"src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react'\nimport { User, Session, AuthError } from '@supabase/supabase-js'\nimport { supabase, Tables } from '@/lib/supabase'\nimport { toast } from '@/components/ui/use-toast'\n\ninterface AuthContextType {\n  user: User | null\n  profile: Tables<'profiles'> | null\n  session: Session | null\n  isLoading: boolean\n  signUp: (email: string, password: string, userData: { username: string }) => Promise<{ error?: AuthError }>\n  signIn: (email: string, password: string) => Promise<{ error?: AuthError }>\n  signOut: () => Promise<void>\n  updateProfile: (updates: Partial<Tables<'profiles'>>) => Promise<void>\n  hasRole: (role: string | string[]) => boolean\n  isAdmin: boolean\n  isEditor: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [profile, setProfile] = useState<Tables<'profiles'> | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession()\n      setSession(session)\n      setUser(session?.user ?? null)\n      \n      if (session?.user) {\n        await fetchProfile(session.user.id)\n      }\n      \n      setIsLoading(false)\n    }\n\n    getInitialSession()\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setSession(session)\n        setUser(session?.user ?? null)\n        \n        if (session?.user) {\n          await fetchProfile(session.user.id)\n        } else {\n          setProfile(null)\n        }\n        \n        setIsLoading(false)\n      }\n    )\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const fetchProfile = async (userId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error fetching profile:', error)\n        return\n      }\n\n      if (data) {\n        setProfile(data)\n      }\n    } catch (error) {\n      console.error('Error in fetchProfile:', error)\n    }\n  }\n\n  const signUp = async (email: string, password: string, userData: { username: string }) => {\n    setIsLoading(true)\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData\n        }\n      })\n\n      if (error) {\n        toast({\n          title: \"Sign up failed\",\n          description: error.message,\n          variant: \"destructive\"\n        })\n        return { error }\n      }\n\n      if (data.user) {\n        // Create profile\n        await supabase\n          .from('profiles')\n          .insert({\n            user_id: data.user.id,\n            username: userData.username,\n            role: 'user',\n            tokens: 100 // Starting bonus\n          })\n\n        toast({\n          title: \"Welcome!\",\n          description: \"Your account has been created successfully. You've received ₦100 starting bonus!\",\n        })\n      }\n\n      return { error: null }\n    } catch (error: any) {\n      toast({\n        title: \"Sign up failed\",\n        description: error.message || \"An unexpected error occurred\",\n        variant: \"destructive\"\n      })\n      return { error }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const signIn = async (email: string, password: string) => {\n    setIsLoading(true)\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      })\n\n      if (error) {\n        toast({\n          title: \"Sign in failed\",\n          description: error.message,\n          variant: \"destructive\"\n        })\n        return { error }\n      }\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been signed in successfully.\",\n      })\n\n      return { error: null }\n    } catch (error: any) {\n      toast({\n        title: \"Sign in failed\",\n        description: error.message || \"An unexpected error occurred\",\n        variant: \"destructive\"\n      })\n      return { error }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const signOut = async () => {\n    setIsLoading(true)\n    try {\n      await supabase.auth.signOut()\n      setProfile(null)\n      toast({\n        title: \"Signed out\",\n        description: \"You've been signed out successfully.\",\n      })\n    } catch (error: any) {\n      toast({\n        title: \"Sign out failed\",\n        description: error.message || \"An unexpected error occurred\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateProfile = async (updates: Partial<Tables<'profiles'>>) => {\n    if (!user) return\n\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update(updates)\n        .eq('user_id', user.id)\n\n      if (error) {\n        toast({\n          title: \"Update failed\",\n          description: error.message,\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      // Refresh profile\n      await fetchProfile(user.id)\n      \n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      })\n    } catch (error: any) {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"An unexpected error occurred\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const hasRole = (role: string | string[]): boolean => {\n    if (!profile) return false\n    if (Array.isArray(role)) {\n      return role.includes(profile.role)\n    }\n    return profile.role === role\n  }\n\n  const isAdmin = hasRole('admin')\n  const isEditor = hasRole(['admin', 'editor'])\n\n  const value: AuthContextType = {\n    user,\n    profile,\n    session,\n    isLoading,\n    signUp,\n    signIn,\n    signOut,\n    updateProfile,\n    hasRole,\n    isAdmin,\n    isEditor\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","size_bytes":6482},"src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = 'https://your-project-ref.supabase.co' // This will be replaced by actual URL\nconst supabaseAnonKey = 'your-anon-key' // This will be replaced by actual key\n\n// For development, we'll use the DATABASE_URL to extract connection details\n// In production, these should be proper Supabase URL and anon key\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// Database types\nexport interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          user_id: string\n          role: 'admin' | 'editor' | 'analyst' | 'user'\n          username: string\n          avatar_url?: string\n          bio?: string\n          tokens: number\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          role?: 'admin' | 'editor' | 'analyst' | 'user'\n          username: string\n          avatar_url?: string\n          bio?: string\n          tokens?: number\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          role?: 'admin' | 'editor' | 'analyst' | 'user'\n          username?: string\n          avatar_url?: string\n          bio?: string\n          tokens?: number\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      articles: {\n        Row: {\n          id: string\n          title: string\n          slug: string\n          excerpt: string\n          content: string\n          cover_url?: string\n          category_id: string\n          status: 'draft' | 'review' | 'published' | 'archived'\n          author_id: string\n          published_at?: string\n          read_time: number\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          title: string\n          slug: string\n          excerpt: string\n          content: string\n          cover_url?: string\n          category_id: string\n          status?: 'draft' | 'review' | 'published' | 'archived'\n          author_id: string\n          published_at?: string\n          read_time: number\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          title?: string\n          slug?: string\n          excerpt?: string\n          content?: string\n          cover_url?: string\n          category_id?: string\n          status?: 'draft' | 'review' | 'published' | 'archived'\n          author_id?: string\n          published_at?: string\n          read_time?: number\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      categories: {\n        Row: {\n          id: string\n          name: string\n          description?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          description?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          description?: string\n          created_at?: string\n        }\n      }\n      reads: {\n        Row: {\n          id: string\n          user_id: string\n          article_id: string\n          started_at: string\n          completed_at?: string\n          duration_ms?: number\n          progress_percent: number\n          device_fingerprint?: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          article_id: string\n          started_at?: string\n          completed_at?: string\n          duration_ms?: number\n          progress_percent?: number\n          device_fingerprint?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          article_id?: string\n          started_at?: string\n          completed_at?: string\n          duration_ms?: number\n          progress_percent?: number\n          device_fingerprint?: string\n        }\n      }\n      reward_rules: {\n        Row: {\n          id: string\n          rule_name: string\n          amount: number\n          condition_type: 'read_complete' | 'streak' | 'referral'\n          daily_cap?: number\n          is_active: boolean\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          rule_name: string\n          amount: number\n          condition_type: 'read_complete' | 'streak' | 'referral'\n          daily_cap?: number\n          is_active?: boolean\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          rule_name?: string\n          amount?: number\n          condition_type?: 'read_complete' | 'streak' | 'referral'\n          daily_cap?: number\n          is_active?: boolean\n          created_at?: string\n        }\n      }\n      reward_ledger: {\n        Row: {\n          id: string\n          user_id: string\n          source_type: string\n          source_id: string\n          amount: number\n          metadata?: Record<string, any>\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          source_type: string\n          source_id: string\n          amount: number\n          metadata?: Record<string, any>\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          source_type?: string\n          source_id?: string\n          amount?: number\n          metadata?: Record<string, any>\n          created_at?: string\n        }\n      }\n      notifications: {\n        Row: {\n          id: string\n          user_id: string\n          type: string\n          payload: Record<string, any>\n          read_at?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          type: string\n          payload: Record<string, any>\n          read_at?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          type?: string\n          payload?: Record<string, any>\n          read_at?: string\n          created_at?: string\n        }\n      }\n      audit_logs: {\n        Row: {\n          id: string\n          actor_id: string\n          action: string\n          entity_type: string\n          entity_id: string\n          diff?: Record<string, any>\n          ip?: string\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          actor_id: string\n          action: string\n          entity_type: string\n          entity_id: string\n          diff?: Record<string, any>\n          ip?: string\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          actor_id?: string\n          action?: string\n          entity_type?: string\n          entity_id?: string\n          diff?: Record<string, any>\n          ip?: string\n          created_at?: string\n        }\n      }\n    }\n  }\n}\n\nexport type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']\nexport type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']\nexport type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']","size_bytes":7240},"src/components/cms/ArticleEditor.tsx":{"content":"import React, { useState, useEffect } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  Save, \n  Eye, \n  Send, \n  Upload, \n  X, \n  Plus,\n  FileText,\n  Image as ImageIcon,\n  Clock,\n  Tag\n} from 'lucide-react'\nimport { toast } from '@/components/ui/use-toast'\n\ninterface ArticleData {\n  id?: string\n  title: string\n  slug: string\n  excerpt: string\n  content: string\n  cover_url: string\n  category: string\n  status: 'draft' | 'review' | 'published' | 'archived'\n  read_time: number\n  tags: string[]\n}\n\ninterface ArticleEditorProps {\n  articleId?: string\n  onSave?: (article: ArticleData) => void\n  onCancel?: () => void\n}\n\nconst ArticleEditor: React.FC<ArticleEditorProps> = ({ articleId, onSave, onCancel }) => {\n  const { profile, isEditor } = useAuth()\n  const [article, setArticle] = useState<ArticleData>({\n    title: '',\n    slug: '',\n    excerpt: '',\n    content: '',\n    cover_url: '',\n    category: '',\n    status: 'draft',\n    read_time: 1,\n    tags: []\n  })\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSaving, setIsSaving] = useState(false)\n  const [previewMode, setPreviewMode] = useState(false)\n  const [newTag, setNewTag] = useState('')\n\n  const categories = [\n    'Politics',\n    'Technology', \n    'Sports',\n    'Business',\n    'Entertainment',\n    'Health',\n    'Science',\n    'Education',\n    'Environment',\n    'World News'\n  ]\n\n  useEffect(() => {\n    if (articleId) {\n      loadArticle(articleId)\n    }\n  }, [articleId])\n\n  useEffect(() => {\n    // Auto-generate slug from title\n    if (article.title && !articleId) {\n      const slug = article.title\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '')\n      setArticle(prev => ({ ...prev, slug }))\n    }\n  }, [article.title, articleId])\n\n  useEffect(() => {\n    // Estimate read time based on content\n    const wordsPerMinute = 200\n    const wordCount = article.content.split(/\\s+/).length\n    const estimatedTime = Math.max(1, Math.ceil(wordCount / wordsPerMinute))\n    setArticle(prev => ({ ...prev, read_time: estimatedTime }))\n  }, [article.content])\n\n  const loadArticle = async (id: string) => {\n    setIsLoading(true)\n    try {\n      // In a real app, this would fetch from the database\n      // For now, using mock data\n      const mockArticle: ArticleData = {\n        id: id,\n        title: 'Sample Article Title',\n        slug: 'sample-article-title',\n        excerpt: 'This is a sample article excerpt that provides a brief overview of the content.',\n        content: 'This is the main content of the article. It contains detailed information about the topic...',\n        cover_url: 'https://images.unsplash.com/photo-1504711434969-e33886168f5c?w=800',\n        category: 'Technology',\n        status: 'draft',\n        read_time: 3,\n        tags: ['technology', 'innovation', 'future']\n      }\n      setArticle(mockArticle)\n    } catch (error) {\n      console.error('Error loading article:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load article\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSave = async (newStatus?: typeof article.status) => {\n    setIsSaving(true)\n    try {\n      const articleToSave = {\n        ...article,\n        status: newStatus || article.status\n      }\n\n      // Validation\n      if (!articleToSave.title.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Title is required\",\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      if (!articleToSave.content.trim()) {\n        toast({\n          title: \"Validation Error\", \n          description: \"Content is required\",\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      if (!articleToSave.category) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Category is required\",\n          variant: \"destructive\"\n        })\n        return\n      }\n\n      // In a real app, this would save to the database\n      console.log('Saving article:', articleToSave)\n\n      toast({\n        title: \"Success\",\n        description: `Article ${newStatus ? newStatus : 'saved'} successfully`,\n      })\n\n      if (onSave) {\n        onSave(articleToSave)\n      }\n\n    } catch (error) {\n      console.error('Error saving article:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to save article\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const handleAddTag = () => {\n    if (newTag.trim() && !article.tags.includes(newTag.trim().toLowerCase())) {\n      setArticle(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim().toLowerCase()]\n      }))\n      setNewTag('')\n    }\n  }\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setArticle(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }))\n  }\n\n  const handleInputChange = (field: keyof ArticleData, value: any) => {\n    setArticle(prev => ({ ...prev, [field]: value }))\n  }\n\n  if (!isEditor) {\n    return (\n      <Alert>\n        <AlertDescription>\n          You don't have permission to edit articles. Editor role required.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">\n            {articleId ? 'Edit Article' : 'Create New Article'}\n          </h1>\n          <p className=\"text-gray-600\">\n            {articleId ? 'Make changes to your article' : 'Write and publish quality content'}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={\n            article.status === 'published' ? 'default' :\n            article.status === 'review' ? 'secondary' :\n            article.status === 'draft' ? 'outline' : 'destructive'\n          }>\n            {article.status}\n          </Badge>\n          <Button variant=\"outline\" onClick={() => setPreviewMode(!previewMode)}>\n            <Eye className=\"h-4 w-4 mr-2\" />\n            {previewMode ? 'Edit' : 'Preview'}\n          </Button>\n        </div>\n      </div>\n\n      {previewMode ? (\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"max-w-3xl mx-auto\">\n              {article.cover_url && (\n                <img \n                  src={article.cover_url} \n                  alt={article.title}\n                  className=\"w-full h-64 object-cover rounded-lg mb-6\"\n                />\n              )}\n              <div className=\"flex items-center gap-4 mb-4\">\n                <Badge variant=\"outline\">{article.category}</Badge>\n                <span className=\"text-sm text-gray-600 flex items-center gap-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  {article.read_time} min read\n                </span>\n              </div>\n              <h1 className=\"text-4xl font-bold mb-4\">{article.title}</h1>\n              <p className=\"text-xl text-gray-600 mb-6\">{article.excerpt}</p>\n              <div className=\"prose max-w-none\">\n                {article.content.split('\\n').map((paragraph, index) => (\n                  <p key={index} className=\"mb-4\">{paragraph}</p>\n                ))}\n              </div>\n              {article.tags.length > 0 && (\n                <div className=\"mt-8 pt-4 border-t\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {article.tags.map(tag => (\n                      <Badge key={tag} variant=\"secondary\">#{tag}</Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Article Content</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Enter article title...\"\n                    value={article.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"slug\">URL Slug</Label>\n                  <Input\n                    id=\"slug\"\n                    placeholder=\"article-url-slug\"\n                    value={article.slug}\n                    onChange={(e) => handleInputChange('slug', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"excerpt\">Excerpt</Label>\n                  <Textarea\n                    id=\"excerpt\"\n                    placeholder=\"Brief description of the article...\"\n                    value={article.excerpt}\n                    onChange={(e) => handleInputChange('excerpt', e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Content</Label>\n                  <Textarea\n                    id=\"content\"\n                    placeholder=\"Write your article content here...\"\n                    value={article.content}\n                    onChange={(e) => handleInputChange('content', e.target.value)}\n                    rows={20}\n                    className=\"font-mono\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Article Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={article.category} onValueChange={(value) => handleInputChange('category', value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map(category => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select value={article.status} onValueChange={(value) => handleInputChange('status', value as any)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"review\">Under Review</SelectItem>\n                      <SelectItem value=\"published\">Published</SelectItem>\n                      <SelectItem value=\"archived\">Archived</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"cover_url\">Cover Image URL</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"cover_url\"\n                      placeholder=\"https://example.com/image.jpg\"\n                      value={article.cover_url}\n                      onChange={(e) => handleInputChange('cover_url', e.target.value)}\n                    />\n                    <Button variant=\"outline\" size=\"icon\">\n                      <Upload className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Estimated Read Time</Label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Clock className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"text-sm\">{article.read_time} minute{article.read_time !== 1 ? 's' : ''}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Tags</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add tag...\"\n                      value={newTag}\n                      onChange={(e) => setNewTag(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleAddTag()}\n                    />\n                    <Button variant=\"outline\" size=\"icon\" onClick={handleAddTag}>\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  {article.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {article.tags.map(tag => (\n                        <Badge key={tag} variant=\"secondary\" className=\"flex items-center gap-1\">\n                          #{tag}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-4 w-4 p-0\"\n                            onClick={() => handleRemoveTag(tag)}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button \n                  className=\"w-full\" \n                  onClick={() => handleSave()}\n                  disabled={isSaving}\n                >\n                  {isSaving ? (\n                    <>\n                      <div className=\"mr-2 h-4 w-4 animate-spin rounded-full border-2 border-background border-t-transparent\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Draft\n                    </>\n                  )}\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => handleSave('review')}\n                  disabled={isSaving}\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Submit for Review\n                </Button>\n                \n                {profile?.role === 'admin' && (\n                  <Button \n                    variant=\"destructive\" \n                    className=\"w-full\"\n                    onClick={() => handleSave('published')}\n                    disabled={isSaving}\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Publish Now\n                  </Button>\n                )}\n                \n                {onCancel && (\n                  <Button variant=\"ghost\" className=\"w-full\" onClick={onCancel}>\n                    Cancel\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ArticleEditor","size_bytes":16626},"src/pages/admin/AdminDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { supabase, Tables } from '@/lib/supabase'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Input } from '@/components/ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  Users, \n  FileText, \n  TrendingUp, \n  DollarSign, \n  Activity,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Shield,\n  Edit,\n  Trash2,\n  Eye,\n  Plus\n} from 'lucide-react'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { toast } from '@/components/ui/use-toast'\n\ninterface DashboardStats {\n  totalUsers: number\n  totalArticles: number\n  totalReads: number\n  totalTokensDistributed: number\n  articlesPublishedToday: number\n  newUsersToday: number\n}\n\nconst AdminDashboard: React.FC = () => {\n  const { profile, isAdmin } = useAuth()\n  const [stats, setStats] = useState<DashboardStats>({\n    totalUsers: 0,\n    totalArticles: 0,\n    totalReads: 0,\n    totalTokensDistributed: 0,\n    articlesPublishedToday: 0,\n    newUsersToday: 0\n  })\n  const [users, setUsers] = useState<Tables<'profiles'>[]>([])\n  const [articles, setArticles] = useState<any[]>([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedTab, setSelectedTab] = useState('overview')\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    if (isAdmin) {\n      loadDashboardData()\n    }\n  }, [isAdmin])\n\n  const loadDashboardData = async () => {\n    setIsLoading(true)\n    try {\n      // Load basic stats (mock data for now since we don't have real data yet)\n      setStats({\n        totalUsers: 1247,\n        totalArticles: 89,\n        totalReads: 5432,\n        totalTokensDistributed: 271600,\n        articlesPublishedToday: 3,\n        newUsersToday: 12\n      })\n\n      // Load users data (mock for now)\n      setUsers([\n        {\n          id: '1',\n          user_id: 'user1',\n          username: 'john_doe',\n          role: 'user',\n          tokens: 850,\n          avatar_url: null,\n          bio: null,\n          created_at: '2023-01-15T10:30:00Z',\n          updated_at: '2023-01-15T10:30:00Z'\n        },\n        {\n          id: '2',\n          user_id: 'user2',\n          username: 'jane_smith',\n          role: 'editor',\n          tokens: 1200,\n          avatar_url: null,\n          bio: 'Content editor and writer',\n          created_at: '2023-02-20T14:45:00Z',\n          updated_at: '2023-02-20T14:45:00Z'\n        },\n        {\n          id: '3',\n          user_id: 'user3',\n          username: 'admin_user',\n          role: 'admin',\n          tokens: 2500,\n          avatar_url: null,\n          bio: 'Platform administrator',\n          created_at: '2022-12-01T09:00:00Z',\n          updated_at: '2022-12-01T09:00:00Z'\n        }\n      ])\n\n      // Load articles data (using existing article structure)\n      setArticles([\n        {\n          id: '1',\n          title: 'Breaking: Major Political Reform Announced',\n          status: 'published',\n          author: 'Sarah Johnson',\n          category: 'Politics',\n          reads: 234,\n          published_at: '2023-11-20T10:00:00Z'\n        },\n        {\n          id: '2',\n          title: 'Tech Giants Report Record Quarterly Earnings',\n          status: 'published',\n          author: 'Michael Chen',\n          category: 'Technology',\n          reads: 189,\n          published_at: '2023-11-19T15:30:00Z'\n        },\n        {\n          id: '3',\n          title: 'Championship Finals Set Record Viewership',\n          status: 'review',\n          author: 'David Rodriguez',\n          category: 'Sports',\n          reads: 0,\n          published_at: null\n        }\n      ])\n\n    } catch (error) {\n      console.error('Error loading dashboard data:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load dashboard data\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const updateUserRole = async (userId: string, newRole: string) => {\n    try {\n      // This would normally update the database\n      setUsers(users.map(user => \n        user.user_id === userId ? { ...user, role: newRole as any } : user\n      ))\n      \n      toast({\n        title: \"User updated\",\n        description: `User role has been updated to ${newRole}`,\n      })\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  const filteredUsers = users.filter(user =>\n    user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    user.role.toLowerCase().includes(searchQuery.toLowerCase())\n  )\n\n  if (!isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Alert className=\"max-w-md\">\n          <Shield className=\"h-4 w-4\" />\n          <AlertDescription>\n            Access denied. Admin privileges required.\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-red-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"border-b bg-white\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n              <p className=\"text-gray-600 mt-1\">Manage users, content, and platform analytics</p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\">Admin</Badge>\n              <span className=\"text-sm text-gray-600\">Welcome, {profile?.username}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"articles\">Articles</TabsTrigger>\n            <TabsTrigger value=\"rewards\">Rewards</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</div>\n                  <p className=\"text-xs text-green-600\">+{stats.newUsersToday} today</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Articles</CardTitle>\n                  <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalArticles}</div>\n                  <p className=\"text-xs text-green-600\">+{stats.articlesPublishedToday} published today</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Reads</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalReads.toLocaleString()}</div>\n                  <p className=\"text-xs text-green-600\">+15% from last month</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Tokens Distributed</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">₦{stats.totalTokensDistributed.toLocaleString()}</div>\n                  <p className=\"text-xs text-green-600\">+8% from last month</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Activity</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Activity className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-sm\">3 new articles published</span>\n                      <span className=\"text-xs text-gray-500 ml-auto\">2 hours ago</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Users className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm\">12 new users registered</span>\n                      <span className=\"text-xs text-gray-500 ml-auto\">5 hours ago</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <DollarSign className=\"h-4 w-4 text-yellow-600\" />\n                      <span className=\"text-sm\">₦2,500 tokens distributed</span>\n                      <span className=\"text-xs text-gray-500 ml-auto\">6 hours ago</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Button className=\"w-full\" onClick={() => setSelectedTab('articles')}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      New Article\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" onClick={() => setSelectedTab('users')}>\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Manage Users\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" onClick={() => setSelectedTab('rewards')}>\n                      <DollarSign className=\"h-4 w-4 mr-2\" />\n                      Reward Settings\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" onClick={() => setSelectedTab('analytics')}>\n                      <TrendingUp className=\"h-4 w-4 mr-2\" />\n                      View Analytics\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>User Management</CardTitle>\n                <CardDescription>Manage user accounts, roles, and permissions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex justify-between items-center mb-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search users...\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        className=\"pl-10 w-80\"\n                      />\n                    </div>\n                    <Select>\n                      <SelectTrigger className=\"w-40\">\n                        <Filter className=\"h-4 w-4 mr-2\" />\n                        <SelectValue placeholder=\"Filter by role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Roles</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"editor\">Editor</SelectItem>\n                        <SelectItem value=\"user\">User</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add User\n                  </Button>\n                </div>\n\n                <div className=\"border rounded-lg\">\n                  <div className=\"grid grid-cols-6 gap-4 p-4 border-b bg-gray-50 font-medium text-sm\">\n                    <div>User</div>\n                    <div>Role</div>\n                    <div>Tokens</div>\n                    <div>Joined</div>\n                    <div>Status</div>\n                    <div>Actions</div>\n                  </div>\n                  \n                  {filteredUsers.map((user) => (\n                    <div key={user.id} className=\"grid grid-cols-6 gap-4 p-4 border-b hover:bg-gray-50\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage src={user.avatar_url || undefined} />\n                          <AvatarFallback>{user.username.charAt(0).toUpperCase()}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-medium\">{user.username}</div>\n                          <div className=\"text-sm text-gray-500\">{user.bio || 'No bio'}</div>\n                        </div>\n                      </div>\n                      <div>\n                        <Badge variant={user.role === 'admin' ? 'destructive' : user.role === 'editor' ? 'default' : 'secondary'}>\n                          {user.role}\n                        </Badge>\n                      </div>\n                      <div className=\"font-medium\">₦{user.tokens}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {new Date(user.created_at).toLocaleDateString()}\n                      </div>\n                      <div>\n                        <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n                      </div>\n                      <div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => updateUserRole(user.user_id, 'admin')}>\n                              <Shield className=\"h-4 w-4 mr-2\" />\n                              Make Admin\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => updateUserRole(user.user_id, 'editor')}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Make Editor\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => updateUserRole(user.user_id, 'user')}>\n                              <Users className=\"h-4 w-4 mr-2\" />\n                              Make User\n                            </DropdownMenuItem>\n                            <DropdownMenuItem className=\"text-red-600\">\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Suspend User\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"articles\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Content Management</CardTitle>\n                <CardDescription>Manage articles, categories, and publishing workflow</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex justify-between items-center mb-6\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search articles...\"\n                        className=\"pl-10 w-80\"\n                      />\n                    </div>\n                    <Select>\n                      <SelectTrigger className=\"w-40\">\n                        <Filter className=\"h-4 w-4 mr-2\" />\n                        <SelectValue placeholder=\"Filter by status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"draft\">Draft</SelectItem>\n                        <SelectItem value=\"review\">Review</SelectItem>\n                        <SelectItem value=\"published\">Published</SelectItem>\n                        <SelectItem value=\"archived\">Archived</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Article\n                  </Button>\n                </div>\n\n                <div className=\"border rounded-lg\">\n                  <div className=\"grid grid-cols-6 gap-4 p-4 border-b bg-gray-50 font-medium text-sm\">\n                    <div>Title</div>\n                    <div>Author</div>\n                    <div>Category</div>\n                    <div>Status</div>\n                    <div>Reads</div>\n                    <div>Actions</div>\n                  </div>\n                  \n                  {articles.map((article) => (\n                    <div key={article.id} className=\"grid grid-cols-6 gap-4 p-4 border-b hover:bg-gray-50\">\n                      <div>\n                        <div className=\"font-medium\">{article.title}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {article.published_at ? new Date(article.published_at).toLocaleDateString() : 'Not published'}\n                        </div>\n                      </div>\n                      <div className=\"text-sm\">{article.author}</div>\n                      <div>\n                        <Badge variant=\"outline\">{article.category}</Badge>\n                      </div>\n                      <div>\n                        <Badge variant={\n                          article.status === 'published' ? 'default' :\n                          article.status === 'review' ? 'secondary' :\n                          article.status === 'draft' ? 'outline' : 'destructive'\n                        }>\n                          {article.status}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm\">{article.reads} reads</div>\n                      <div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              Preview\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <TrendingUp className=\"h-4 w-4 mr-2\" />\n                              Publish\n                            </DropdownMenuItem>\n                            <DropdownMenuItem className=\"text-red-600\">\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"rewards\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Reward System</CardTitle>\n                <CardDescription>Configure reward rules and monitor token distribution</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Reward Rules</h3>\n                    <div className=\"border rounded-lg p-4 space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <div className=\"font-medium\">Article Completion</div>\n                          <div className=\"text-sm text-gray-500\">Reward for completing an article</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">₦50</div>\n                          <Badge variant=\"default\" className=\"text-xs\">Active</Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <div className=\"font-medium\">Daily Streak</div>\n                          <div className=\"text-sm text-gray-500\">Bonus for reading 3+ articles daily</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">₦25</div>\n                          <Badge variant=\"default\" className=\"text-xs\">Active</Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <div className=\"font-medium\">Referral Bonus</div>\n                          <div className=\"text-sm text-gray-500\">Reward for successful referrals</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">₦100</div>\n                          <Badge variant=\"secondary\" className=\"text-xs\">Inactive</Badge>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button className=\"w-full\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add New Rule\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">Distribution Stats</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <Card>\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-2xl font-bold\">₦54,300</div>\n                          <div className=\"text-sm text-gray-500\">This Month</div>\n                        </CardContent>\n                      </Card>\n                      <Card>\n                        <CardContent className=\"p-4\">\n                          <div className=\"text-2xl font-bold\">1,086</div>\n                          <div className=\"text-sm text-gray-500\">Transactions</div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                    \n                    <div className=\"border rounded-lg p-4\">\n                      <h4 className=\"font-medium mb-3\">Recent Distributions</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span>john_doe completed \"Tech Giants Report...\"</span>\n                          <span className=\"font-medium text-green-600\">+₦50</span>\n                        </div>\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span>jane_smith completed \"Championship Finals...\"</span>\n                          <span className=\"font-medium text-green-600\">+₦50</span>\n                        </div>\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span>mike_jones achieved daily streak</span>\n                          <span className=\"font-medium text-green-600\">+₦25</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Platform Analytics</CardTitle>\n                <CardDescription>Monitor user engagement and platform performance</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">User Growth</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center border rounded-lg\">\n                        <div className=\"text-center text-gray-500\">\n                          <TrendingUp className=\"h-12 w-12 mx-auto mb-2\" />\n                          <p>Chart visualization would go here</p>\n                          <p className=\"text-sm\">Showing user growth over time</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Reading Activity</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center border rounded-lg\">\n                        <div className=\"text-center text-gray-500\">\n                          <Activity className=\"h-12 w-12 mx-auto mb-2\" />\n                          <p>Chart visualization would go here</p>\n                          <p className=\"text-sm\">Showing reading patterns</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Popular Categories</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <span>Technology</span>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"bg-blue-200 h-2 w-20 rounded-full\">\n                              <div className=\"bg-blue-600 h-2 w-16 rounded-full\"></div>\n                            </div>\n                            <span className=\"text-sm\">80%</span>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span>Politics</span>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"bg-red-200 h-2 w-20 rounded-full\">\n                              <div className=\"bg-red-600 h-2 w-12 rounded-full\"></div>\n                            </div>\n                            <span className=\"text-sm\">60%</span>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span>Sports</span>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"bg-green-200 h-2 w-20 rounded-full\">\n                              <div className=\"bg-green-600 h-2 w-10 rounded-full\"></div>\n                            </div>\n                            <span className=\"text-sm\">50%</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Token Distribution</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-64 flex items-center justify-center border rounded-lg\">\n                        <div className=\"text-center text-gray-500\">\n                          <DollarSign className=\"h-12 w-12 mx-auto mb-2\" />\n                          <p>Chart visualization would go here</p>\n                          <p className=\"text-sm\">Showing token distribution trends</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n\nexport default AdminDashboard","size_bytes":31728},"src/pages/auth/Login.tsx":{"content":"import React, { useState } from 'react'\nimport { Navigate, Link } from 'react-router-dom'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Loader2, Eye, EyeOff, ArrowLeft } from 'lucide-react'\n\nconst Login: React.FC = () => {\n  const { user, signIn, signUp, isLoading } = useAuth()\n  const [showPassword, setShowPassword] = useState(false)\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    username: '',\n    confirmPassword: ''\n  })\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  // Redirect if already logged in\n  if (user) {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  const validateForm = (isSignUp: boolean) => {\n    const newErrors: Record<string, string> = {}\n\n    if (!formData.email) {\n      newErrors.email = 'Email is required'\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email'\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required'\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters'\n    }\n\n    if (isSignUp) {\n      if (!formData.username) {\n        newErrors.username = 'Username is required'\n      } else if (formData.username.length < 3) {\n        newErrors.username = 'Username must be at least 3 characters'\n      }\n\n      if (!formData.confirmPassword) {\n        newErrors.confirmPassword = 'Please confirm your password'\n      } else if (formData.password !== formData.confirmPassword) {\n        newErrors.confirmPassword = 'Passwords do not match'\n      }\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = async (e: React.FormEvent, isSignUp: boolean) => {\n    e.preventDefault()\n    \n    if (!validateForm(isSignUp)) return\n\n    setIsSubmitting(true)\n    try {\n      let result\n      if (isSignUp) {\n        result = await signUp(formData.email, formData.password, {\n          username: formData.username\n        })\n      } else {\n        result = await signIn(formData.email, formData.password)\n      }\n\n      if (!result.error) {\n        // Success will be handled by the auth context\n      }\n    } catch (error) {\n      console.error('Auth error:', error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }))\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md mx-auto\">\n        <div className=\"mb-6\">\n          <Link \n            to=\"/\"\n            className=\"inline-flex items-center text-red-600 hover:text-red-700 transition-colors\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Link>\n        </div>\n\n        <Card className=\"w-full\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Welcome to dadapay\n            </CardTitle>\n            <CardDescription>\n              Sign in to start earning rewards for reading quality articles\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"signin\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"signin\">\n                <form onSubmit={(e) => handleSubmit(e, false)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"signin-email\">Email</Label>\n                    <Input\n                      id=\"signin-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      className={errors.email ? 'border-red-500' : ''}\n                    />\n                    {errors.email && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"signin-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"signin-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter your password\"\n                        value={formData.password}\n                        onChange={(e) => handleInputChange('password', e.target.value)}\n                        className={errors.password ? 'border-red-500 pr-10' : 'pr-10'}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    {errors.password && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.password}</p>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={isSubmitting || isLoading}\n                  >\n                    {isSubmitting || isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      'Sign In'\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"signup\">\n                <form onSubmit={(e) => handleSubmit(e, true)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"signup-username\">Username</Label>\n                    <Input\n                      id=\"signup-username\"\n                      type=\"text\"\n                      placeholder=\"Choose a username\"\n                      value={formData.username}\n                      onChange={(e) => handleInputChange('username', e.target.value)}\n                      className={errors.username ? 'border-red-500' : ''}\n                    />\n                    {errors.username && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.username}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"signup-email\">Email</Label>\n                    <Input\n                      id=\"signup-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      className={errors.email ? 'border-red-500' : ''}\n                    />\n                    {errors.email && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"signup-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"signup-password\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Create a password\"\n                        value={formData.password}\n                        onChange={(e) => handleInputChange('password', e.target.value)}\n                        className={errors.password ? 'border-red-500 pr-10' : 'pr-10'}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    {errors.password && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.password}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"signup-confirm\">Confirm Password</Label>\n                    <Input\n                      id=\"signup-confirm\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={formData.confirmPassword}\n                      onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                      className={errors.confirmPassword ? 'border-red-500' : ''}\n                    />\n                    {errors.confirmPassword && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.confirmPassword}</p>\n                    )}\n                  </div>\n\n                  <Alert>\n                    <AlertDescription>\n                      By signing up, you'll receive ₦100 starting bonus tokens!\n                    </AlertDescription>\n                  </Alert>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={isSubmitting || isLoading}\n                  >\n                    {isSubmitting || isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Creating Account...\n                      </>\n                    ) : (\n                      'Create Account'\n                    )}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Start reading quality articles and earn tokens for every completed read!\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default Login","size_bytes":11208},"src/pages/user/UserDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react'\nimport { useAuth } from '@/contexts/AuthContext'\nimport { supabase, Tables } from '@/lib/supabase'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Progress } from '@/components/ui/progress'\nimport { \n  BookOpen, \n  DollarSign, \n  TrendingUp, \n  Calendar,\n  Award,\n  Target,\n  Clock,\n  Edit,\n  Save,\n  Trophy,\n  Flame,\n  Eye,\n  Star\n} from 'lucide-react'\nimport { toast } from '@/components/ui/use-toast'\n\ninterface UserStats {\n  totalReads: number\n  totalTokensEarned: number\n  currentStreak: number\n  favoriteCategory: string\n  averageReadTime: number\n  articlesThisWeek: number\n}\n\ninterface ReadingHistory {\n  id: string\n  articleTitle: string\n  category: string\n  readDate: string\n  tokensEarned: number\n  readTime: number\n}\n\nconst UserDashboard: React.FC = () => {\n  const { user, profile, updateProfile } = useAuth()\n  const [stats, setStats] = useState<UserStats>({\n    totalReads: 0,\n    totalTokensEarned: 0,\n    currentStreak: 0,\n    favoriteCategory: '',\n    averageReadTime: 0,\n    articlesThisWeek: 0\n  })\n  const [readingHistory, setReadingHistory] = useState<ReadingHistory[]>([])\n  const [isEditing, setIsEditing] = useState(false)\n  const [editForm, setEditForm] = useState({\n    username: profile?.username || '',\n    bio: profile?.bio || ''\n  })\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    if (user && profile) {\n      loadUserData()\n    }\n  }, [user, profile])\n\n  const loadUserData = async () => {\n    setIsLoading(true)\n    try {\n      // Load user stats (mock data for now)\n      setStats({\n        totalReads: 47,\n        totalTokensEarned: 2350,\n        currentStreak: 5,\n        favoriteCategory: 'Technology',\n        averageReadTime: 3.2,\n        articlesThisWeek: 12\n      })\n\n      // Load reading history (mock data)\n      setReadingHistory([\n        {\n          id: '1',\n          articleTitle: 'Breaking: Major Political Reform Announced',\n          category: 'Politics',\n          readDate: '2023-11-20T10:30:00Z',\n          tokensEarned: 50,\n          readTime: 3\n        },\n        {\n          id: '2',\n          articleTitle: 'Tech Giants Report Record Quarterly Earnings',\n          category: 'Technology',\n          readDate: '2023-11-19T15:45:00Z',\n          tokensEarned: 50,\n          readTime: 4\n        },\n        {\n          id: '3',\n          articleTitle: 'Championship Finals Set Record Viewership',\n          category: 'Sports',\n          readDate: '2023-11-18T20:15:00Z',\n          tokensEarned: 50,\n          readTime: 3\n        },\n        {\n          id: '4',\n          articleTitle: 'Climate Change Summit Reaches Historic Agreement',\n          category: 'Politics',\n          readDate: '2023-11-17T11:20:00Z',\n          tokensEarned: 50,\n          readTime: 5\n        },\n        {\n          id: '5',\n          articleTitle: 'AI Revolution in Healthcare Shows Promise',\n          category: 'Technology',\n          readDate: '2023-11-16T14:30:00Z',\n          tokensEarned: 75, // Bonus for streak\n          readTime: 4\n        }\n      ])\n\n      setEditForm({\n        username: profile?.username || '',\n        bio: profile?.bio || ''\n      })\n\n    } catch (error) {\n      console.error('Error loading user data:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to load user data\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSaveProfile = async () => {\n    try {\n      await updateProfile({\n        username: editForm.username,\n        bio: editForm.bio\n      })\n      setIsEditing(false)\n    } catch (error) {\n      console.error('Error updating profile:', error)\n    }\n  }\n\n  const weeklyGoal = 15\n  const weeklyProgress = (stats.articlesThisWeek / weeklyGoal) * 100\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-red-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"border-b bg-white\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src={profile?.avatar_url || undefined} />\n                <AvatarFallback className=\"text-lg\">\n                  {profile?.username?.charAt(0).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Welcome back, {profile?.username}!</h1>\n                <p className=\"text-gray-600 mt-1\">Keep reading to earn more tokens and build your streak</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-green-600\">₦{profile?.tokens}</div>\n                <div className=\"text-sm text-gray-500\">Current Balance</div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Flame className=\"h-5 w-5 text-orange-500\" />\n                <span className=\"text-lg font-semibold\">{stats.currentStreak}</span>\n                <span className=\"text-sm text-gray-500\">day streak</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"history\">Reading History</TabsTrigger>\n            <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Articles Read</CardTitle>\n                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.totalReads}</div>\n                  <p className=\"text-xs text-green-600\">+{stats.articlesThisWeek} this week</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Tokens Earned</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">₦{stats.totalTokensEarned}</div>\n                  <p className=\"text-xs text-green-600\">+₦350 this week</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Current Streak</CardTitle>\n                  <Flame className=\"h-4 w-4 text-orange-500\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.currentStreak} days</div>\n                  <p className=\"text-xs text-blue-600\">Keep it going!</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Avg. Read Time</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats.averageReadTime} min</div>\n                  <p className=\"text-xs text-gray-600\">Per article</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle>Weekly Goal Progress</CardTitle>\n                  <CardDescription>Read {weeklyGoal} articles this week to earn a bonus</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">\n                        {stats.articlesThisWeek} of {weeklyGoal} articles\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        {Math.round(weeklyProgress)}% complete\n                      </span>\n                    </div>\n                    <Progress value={weeklyProgress} className=\"h-3\" />\n                    {weeklyProgress >= 100 ? (\n                      <div className=\"flex items-center gap-2 text-green-600\">\n                        <Trophy className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">Goal achieved! Bonus: ₦100</span>\n                      </div>\n                    ) : (\n                      <div className=\"text-sm text-gray-600\">\n                        {weeklyGoal - stats.articlesThisWeek} more articles to reach your goal\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Achievements</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                        <Star className=\"h-4 w-4 text-yellow-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-sm\">First Article</div>\n                        <div className=\"text-xs text-gray-500\">Read your first article</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                        <Flame className=\"h-4 w-4 text-orange-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-sm\">5-Day Streak</div>\n                        <div className=\"text-xs text-gray-500\">Read for 5 consecutive days</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                        <Target className=\"h-4 w-4 text-green-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-sm\">25 Articles</div>\n                        <div className=\"text-xs text-gray-500\">Read 25 articles total</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3 opacity-50\">\n                      <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                        <Award className=\"h-4 w-4 text-gray-400\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-sm\">Weekly Champion</div>\n                        <div className=\"text-xs text-gray-500\">Complete weekly goal</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Reading Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{stats.favoriteCategory}</div>\n                    <div className=\"text-sm text-gray-600\">Favorite Category</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {new Date().toLocaleDateString('en-US', { weekday: 'long' })}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Most Active Day</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">89%</div>\n                    <div className=\"text-sm text-gray-600\">Completion Rate</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Reading History</CardTitle>\n                <CardDescription>Track all the articles you've read and tokens earned</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {readingHistory.map((read) => (\n                    <div key={read.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                          <BookOpen className=\"h-5 w-5 text-red-600\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{read.articleTitle}</div>\n                          <div className=\"text-sm text-gray-500 flex items-center gap-4\">\n                            <span>\n                              <Badge variant=\"outline\" className=\"text-xs\">{read.category}</Badge>\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {read.readTime} min read\n                            </span>\n                            <span>{new Date(read.readDate).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-green-600\">+₦{read.tokensEarned}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(read.readDate).toLocaleTimeString()}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"earnings\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Today's Earnings</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600\">₦150</div>\n                  <p className=\"text-sm text-gray-600\">3 articles completed</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">This Week</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-blue-600\">₦600</div>\n                  <p className=\"text-sm text-gray-600\">12 articles completed</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">This Month</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-purple-600\">₦2,350</div>\n                  <p className=\"text-sm text-gray-600\">47 articles completed</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Earnings Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <BookOpen className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"font-medium\">Article Completions</span>\n                    </div>\n                    <span className=\"font-bold text-green-600\">₦2,200</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center p-3 bg-orange-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Flame className=\"h-5 w-5 text-orange-600\" />\n                      <span className=\"font-medium\">Streak Bonuses</span>\n                    </div>\n                    <span className=\"font-bold text-orange-600\">₦100</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Target className=\"h-5 w-5 text-purple-600\" />\n                      <span className=\"font-medium\">Weekly Goals</span>\n                    </div>\n                    <span className=\"font-bold text-purple-600\">₦50</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Settings</CardTitle>\n                <CardDescription>Manage your account information and preferences</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center gap-6\">\n                    <Avatar className=\"h-20 w-20\">\n                      <AvatarImage src={profile?.avatar_url || undefined} />\n                      <AvatarFallback className=\"text-2xl\">\n                        {profile?.username?.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Change Photo\n                      </Button>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        Recommended: Square image, at least 200x200px\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"username\">Username</Label>\n                        <Input\n                          id=\"username\"\n                          value={editForm.username}\n                          onChange={(e) => setEditForm({ ...editForm, username: e.target.value })}\n                          disabled={!isEditing}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          value={user?.email || ''}\n                          disabled\n                          className=\"bg-gray-50\"\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">Email cannot be changed</p>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"role\">Role</Label>\n                        <Input\n                          id=\"role\"\n                          value={profile?.role || ''}\n                          disabled\n                          className=\"bg-gray-50\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"bio\">Bio</Label>\n                        <Textarea\n                          id=\"bio\"\n                          placeholder=\"Tell us about yourself...\"\n                          value={editForm.bio}\n                          onChange={(e) => setEditForm({ ...editForm, bio: e.target.value })}\n                          disabled={!isEditing}\n                          rows={4}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label>Member Since</Label>\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          {profile?.created_at ? new Date(profile.created_at).toLocaleDateString() : 'Unknown'}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center pt-4 border-t\">\n                    <div className=\"text-sm text-gray-600\">\n                      Last updated: {profile?.updated_at ? new Date(profile.updated_at).toLocaleDateString() : 'Never'}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      {isEditing ? (\n                        <>\n                          <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                            Cancel\n                          </Button>\n                          <Button onClick={handleSaveProfile}>\n                            <Save className=\"h-4 w-4 mr-2\" />\n                            Save Changes\n                          </Button>\n                        </>\n                      ) : (\n                        <Button onClick={() => setIsEditing(true)}>\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit Profile\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n\nexport default UserDashboard","size_bytes":23911}},"version":1}